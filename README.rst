============
docker_base
============
Docker base container for *JEDI*.

The main responsibility of this repository is to set up a Docker image file
that includes these basic components:

- An ubuntu 20.04 operating system

- A selection of useful packages, most installed with `apt`

  - wget, curl
  - git, git-flow, git-lfs
  - cmake, autoconfig
  - vim, emacs, nedit
  - doxygen, latex
  - python3 (numpy, scipy, yaml)
  - valgrind, clang-tidy, etc
  - etc..

- optional enhancements for HPC environments, including

  - Infiniband OFED drivers: Mellanox or generic linux inbox
  - UCX and components (knem, xpmem)
  - hpcx
  - Intel's PSM (Performace Scaled Messaging) library
  - Slurm PMI2 library (or alternative)

For the public containers, namely gnu-openmpi and clang-mpich, the `docker_base` container also includes:

- A Compiler suite (C++, C, Fortran)
- An MPI library (currently openmpi but other options such as mpich will be developed in the future)

However, the compiler suite and MPI library are not included in the intel `docker_base` containers because we do not have legal permission to distribute this content on Docker Hub.  So, these are added in a later stage of the build process. Consult the `containers repository <https://github.com/JCSDA-internal/oops/blob/develop/docs/Intel.md>`_ for further information.


How to build the docker_base image
----------------------------------

This repository makes use of `NVIDIA's HPC Container Maker <https://github.com/NVIDIA/hpc-container-maker>`_ so, if you want to make changes, **do not edit the Dockerfiles directly**.

Instead, edit the `base-dev.py` file.  This is what generates the Dockerfiles automatically.

So, if you want to build `docker_base` containers, the first step is to install the HPC container maker, ``hpccm``.  This is a python package that you can install with ``pip`` or ``conda``

.. code-block:: bash

  sudo pip install hpccm

.. code-block:: bash

  conda install -c conda-forge hpccm

Then just run the ``make_dockerimage`` script to build a container (respond to questions if prompted):

.. code-block:: bash

   ./make_dockerimage.sh gnu-openmpi-dev beta 0

The script takes three arguments.  The first is the name of the container.  This should follow the naming convention of ``<compiler>-<mpi>

%%%%%%%%%%

The Dockerfile is automatically generated by running the :code:`hpccm.py` python script from this repository

.. highlight:: bash
.. code:: bash

  rm Dockerfile
  <path>/hpc-container-maker/hpccm.py --recipe base.py --format docker > Dockerfile

Then you can process the Dockerfile with a normal :code:`docker build` command and push it to Docker Hub for use in other containers.
For example:

.. highlight:: bash
.. code:: bash

  export name="gnu-openmpi-dev"
  make_dockerfile.sh $name
  docker image build --no-cache -f Dockerfile.$name -t jcsda/docker_base-$name .
  docker push jcsda/docker_base-$name


Check out the docker base image
---------------------------------
.. code:: bash

  docker pull jcsda/docker_base

Running the container
-----------------------

To execute a single (in this case, graphical) command in the docker container, you can do, e.g.

.. code:: bash

  docker run -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=unix$DISPLAY jcsda/docker_base kdbg

To "enter" the docker container (as root), you can run a shell, e.g.

.. code:: bash

  docker run --rm -it jcsda/docker_base bash
